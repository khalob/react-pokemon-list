{"version":3,"sources":["imgs/types-key.png","pokemon.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useMountEffect","fun","useEffect","getRandomInt","max","Math","floor","random","getUSHeight","decimetres","convertedToUS","ft","round","PokemonCard","endPoint","useState","pokemon","setPokemon","axios","get","then","result","curPokemon","data","maxIndex","moves","length","moveAPIs","movesArray","push","splice","move","url","Promise","all","results","forEach","hectograms","types","map","item","type","name","height","weight","id","className","join","index","key","src","alt","flavor_text_entries","flavor_text","PokemonList","pokemonEndpoints","setPokemonEndpoints","res","d","pokemonEndpoint","uuid","typesKey","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,uC,wSCMrCC,EAAiB,SAACC,GAAD,OAASC,oBAAUD,EAAK,KACzCE,EAAe,SAACC,GAAD,OAASC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMF,KAE9DI,EAAc,SAACC,GACnB,IAAMC,EAA6B,QAAbD,EAChBE,EAAKN,KAAKC,MAAMI,GAGtB,OAAQC,EAAK,KAFEN,KAAKO,MAA6B,IAAtBF,EAAgBC,IAEb,KAyBhC,IAAME,EAAc,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACNC,mBAAS,MADH,mBAC7BC,EAD6B,KACpBC,EADoB,KAoDpC,GANAjB,GAAe,WACTc,GA1CJI,IAAMC,IAAIL,GACTM,MAAK,SAACC,GACL,IAAMC,EAAaD,EAAOE,KACpBC,EAAWF,EAAWG,MAAMC,OAAS,EACrCC,EAAW,GACXC,EAAaN,EAAWG,MAG9BE,EAASE,KAAKX,IACZU,EAAWE,OAAO3B,EAAaqB,GAAW,GAAG,GAAGO,KAAKC,MAGvDL,EAASE,KAAKX,IACZU,EAAWzB,EAAaqB,EAAW,IAAIO,KAAKC,MAI9CC,QAAQC,IAAIP,GACXP,MAAK,SAACe,GACL,IAAMV,EAAQ,GACdU,EAAQC,SAAQ,SAACf,GACfI,EAAMI,KAAKR,EAAOE,SAGpB,IA5Dac,EA4DPC,EAAQhB,EAAWgB,MAAMC,KAAI,SAACC,GAClC,OAAOA,EAAKC,QAIdxB,EAAW,CACTyB,KAAMpB,EAAWoB,KACjBC,OAAQnC,EAAYc,EAAWqB,QAC/BC,QApEWP,EAoESf,EAAWsB,OApELvC,KAAKO,MAAmB,QAAbyB,IAqErCC,MAAOA,EACPO,GAAIvB,EAAWuB,GACfpB,MAAOA,cAYVT,EACH,OACA,yBAAK8B,UAAU,eACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,mBACf,yBAAKA,UAAU,qBAMrB,IAAMR,EAAQtB,EAAQsB,MAAMC,KAAI,SAACE,GAAD,OAC9BA,EAAKC,QAGP,OACE,yBAAKI,UAAW,QAAUR,EAAMS,KAAK,MAEjC,yBAAKD,UAAU,aACb,yBAAKA,UAAU,eACb,0BAAMA,UAAU,cAAc9B,EAAQ0B,MACtC,yBAAKI,UAAU,YAAYD,GAAG,aAC3B7B,EAAQsB,MAAMC,KAAI,SAACE,EAAMO,GAAP,OACjB,0BAAMF,UAAWL,EAAKC,KAAO,iBAAkBO,IAAKD,SAK1D,yBAAKF,UAAU,WACb,yBAAKA,UAAU,aAAaI,IAAG,wDAAmDlC,EAAQ6B,GAA3D,QAAqEM,IAAK,iBAAmBnC,EAAQ0B,QAGtI,yBAAKI,UAAU,aAAa,WAAa9B,EAAQ2B,OAAS,aAAe3B,EAAQ4B,OAAS,SAEzF,yBAAKE,UAAU,YAAYD,GAAG,aAC5B7B,EAAQS,MAAMc,KAAI,SAACR,EAAMiB,GAAP,OACjB,yBAAKF,UAAU,iBAAiBG,IAAKD,GACnC,0BAAMF,UAAWf,EAAKU,KAAKC,KAAO,mBAClC,0BAAMI,UAAU,oBACd,0BAAMA,UAAU,aAAaf,EAAKW,KAAlC,KADF,IACmDX,EAAKqB,oBAAoB,GAAGC,kBAMrF,0BAAMP,UAAU,cAAc9B,EAAQ6B,GAAK,SAG7C,yBAAKC,UAAU,gBAMRQ,EAhIf,WAAwB,IAAD,EAC2BvC,mBAAS,IADpC,mBACdwC,EADc,KACIC,EADJ,KAUrB,OAPAxD,GAAe,WACbkB,IAAMC,IAAI,sCACPC,MAAK,SAACqC,GACHD,EAAoBC,EAAIlC,KAAKY,QAAQI,KAAI,SAAAmB,GAAC,OAAIA,EAAE1B,cAKtD,yBAAKc,UAAU,gBACb,4CACCS,EAAiBhB,KAAI,SAACoB,GAAD,OACpB,kBAAC,EAAD,CAAa7C,SAAU6C,EAAiBV,IAAKW,WAE/C,qCACA,yBAAKd,UAAU,YAAYI,IAAKW,IAAUV,IAAI,4BClBrCW,E,iLAVX,OACE,yBAAKhB,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,Y,GALQiB,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvD,MAAK,SAAAwD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c3896ba4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/types-key.b88d7dd8.png\";","import React, {useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport uuid from 'react-uuid'\r\nimport './local.scss';\r\nimport typesKey from './imgs/types-key.png';\r\n\r\nconst useMountEffect = (fun) => useEffect(fun, []);\r\nconst getRandomInt = (max) => Math.floor(Math.random() * Math.floor(max));\r\nconst getUSWeight = (hectograms) => Math.round(hectograms * 0.220462);\r\nconst getUSHeight = (decimetres) => {\r\n  const convertedToUS = decimetres * 0.328084;\r\n  const ft = Math.floor(convertedToUS);\r\n  const inches = Math.round((convertedToUS - ft) * 12);\r\n\r\n  return  ft + '\\' ' + inches + '\"';\r\n};\r\n\r\nfunction PokemonList() {\r\n  const [pokemonEndpoints, setPokemonEndpoints] = useState([]);\r\n\r\n  useMountEffect(() => {\r\n    axios.get('https://pokeapi.co/api/v2/pokemon/')\r\n      .then((res) => {\r\n          setPokemonEndpoints(res.data.results.map(d => d.url));\r\n      });\r\n  })\r\n\r\n  return (\r\n    <div className=\"pokemon-list\">\r\n      <h1>Pokemon List</h1>\r\n      {pokemonEndpoints.map((pokemonEndpoint) => (\r\n        <PokemonCard endPoint={pokemonEndpoint} key={uuid()} />\r\n      ))}\r\n      <h1>Types</h1>\r\n      <img className=\"types-key\" src={typesKey} alt=\"Key for pokemon types\"/>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst PokemonCard = ({ endPoint }) => {\r\n  const [pokemon, setPokemon] = useState(null);\r\n  const totalPossiblePokemon = '807';\r\n\r\n  const getPokemonData = () => {\r\n    axios.get(endPoint)\r\n    .then((result) => {\r\n      const curPokemon = result.data;\r\n      const maxIndex = curPokemon.moves.length - 1;\r\n      const moveAPIs = [];\r\n      const movesArray = curPokemon.moves;\r\n\r\n      // Store move API url\r\n      moveAPIs.push(axios(\r\n        movesArray.splice(getRandomInt(maxIndex), 1)[0].move.url,\r\n      ));\r\n\r\n      moveAPIs.push(axios(\r\n        movesArray[getRandomInt(maxIndex - 1)].move.url,\r\n      ));\r\n\r\n      // Get move data\r\n      Promise.all(moveAPIs)\r\n      .then((results) => {\r\n        const moves = [];\r\n        results.forEach((result) => {\r\n          moves.push(result.data);\r\n        });\r\n\r\n        const types = curPokemon.types.map((item) => {\r\n          return item.type;\r\n        });\r\n\r\n        // Push this pokemon\r\n        setPokemon({\r\n          name: curPokemon.name,\r\n          height: getUSHeight(curPokemon.height),\r\n          weight: getUSWeight(curPokemon.weight),\r\n          types: types,\r\n          id: curPokemon.id,\r\n          moves: moves\r\n        });\r\n      });\r\n    })\r\n  };\r\n\r\n  useMountEffect(() => {\r\n    if (endPoint) {\r\n      getPokemonData();\r\n    }\r\n  });\r\n\r\n  if (!pokemon) {\r\n    return (\r\n    <div className=\"placeholder\">\r\n      <div className=\"spinner\">\r\n        <div className=\"double-bounce1\"></div>\r\n        <div className=\"double-bounce2\"></div>\r\n      </div>\r\n    </div>\r\n    )\r\n  }\r\n\r\n  const types = pokemon.types.map((type) => (\r\n    type.name\r\n  ))\r\n\r\n  return (\r\n    <div className={'card ' + types.join(' ')}>\r\n\r\n        <div className=\"card-body\">\r\n          <div className=\"card-header\">\r\n            <span className=\"card-title\">{pokemon.name}</span>\r\n            <div className=\"type-list\" id=\"type-list\">\r\n              {pokemon.types.map((type, index) => (\r\n                <span className={type.name + '-type type-img'} key={index}></span>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"hero-bg\">\r\n            <img className=\"hero-image\" src={`https://pokeres.bastionbot.org/images/pokemon/${pokemon.id}.png`} alt={'front view of ' + pokemon.name}/>\r\n          </div>\r\n\r\n          <div className=\"pokestats\">{'Length: ' + pokemon.height + ', Weight: ' + pokemon.weight + ' lbs.'}</div>\r\n\r\n          {<div className=\"move-list\" id=\"move-list\">\r\n            {pokemon.moves.map((move, index) => (\r\n              <div className=\"move-container\" key={index}>\r\n                <span className={move.type.name + '-type type-img'}></span>\r\n                <span className=\"move-description\">\r\n                  <span className=\"move-name\">{move.name}:</span> {move.flavor_text_entries[2].flavor_text}\r\n                </span>\r\n              </div>\r\n            ))}\r\n          </div>}\r\n\r\n          <span className=\"pokenumber\">{pokemon.id + '/' + totalPossiblePokemon}</span>\r\n        </div>\r\n\r\n        <div className=\"card-back\"></div>\r\n\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default PokemonList;","import React, {Component} from 'react';\nimport './App.css';\nimport PokemonList from './pokemon';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <PokemonList />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}